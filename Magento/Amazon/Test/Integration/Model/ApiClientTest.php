<?php

declare(strict_types=1);

namespace Magento\Amazon\Test\Integration\Model;

use Magento\Amazon\Model\Amazon\Account;
use Magento\Amazon\Model\ApiClient;
use Magento\Amazon\Service\ReadOnlyModeException;
use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

class ApiClientTest extends TestCase
{
    /**
     * @var ApiClient
     */
    private $apiClient;
    /**
     * @var \Magento\Framework\ObjectManagerInterface
     */
    private $objectManager;

    protected function setUp(): void
    {
        $this->objectManager = \Magento\TestFramework\Helper\Bootstrap::getObjectManager();
        $this->apiClient = $apiClient = \Magento\TestFramework\ObjectManager::getInstance()->get(ApiClient::class);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @magentoConfigFixture default/saleschannels/general/read_only 1
     * @magentoDataFixture Magento_Amazon::Test/Integration/_files/indexer_amazon_account.php
     */
    public function testPushCommandsVerifiesReadOnlyMode()
    {
        $this->expectException(ReadOnlyModeException::class);
        $this->apiClient->pushCommands($this->getAccountByName('mage-test'), []);
    }

    /**
     * @magentoConfigFixture default/saleschannels/general/read_only 1
     * @magentoDataFixture Magento_Amazon::Test/Integration/_files/indexer_amazon_account.php
     */
    public function testGetIrpUrlVerifiesReadOnlyMode()
    {
        $this->expectException(ReadOnlyModeException::class);
        $this->apiClient->getIrpUrl($this->getAccountByName('mage-test'));
    }

    /**
     * @magentoConfigFixture default/saleschannels/general/read_only 1
     * @magentoDataFixture Magento_Amazon::Test/Integration/_files/indexer_amazon_account.php
     */
    public function testDeleteMerchantVerifiesReadOnlyMode()
    {
        $this->expectException(ReadOnlyModeException::class);
        $this->apiClient->deleteMerchant($this->getAccountByName('mage-test')->getUuid(), 'US');
    }

    /**
     * @magentoConfigFixture default/saleschannels/general/read_only 1
     * @magentoDataFixture Magento_Amazon::Test/Integration/_files/indexer_amazon_account.php
     */
    public function testDeleteLogsVerifiesReadOnlyMode()
    {
        $this->expectException(ReadOnlyModeException::class);
        $this->apiClient->deleteLogs($this->getAccountByName('mage-test'), []);
    }

    /**
     * @magentoConfigFixture default/saleschannels/general/read_only 1
     * @magentoDataFixture Magento_Amazon::Test/Integration/_files/indexer_amazon_account.php
     */
    public function testUpdateMerchantStatusVerifiesReadOnlyMode()
    {
        $this->expectException(ReadOnlyModeException::class);
        $this->apiClient->updateMerchantStatus($this->getAccountByName('mage-test'), 0);
    }

    /**
     * @magentoConfigFixture default/saleschannels/general/read_only 1
     * @magentoDataFixture Magento_Amazon::Test/Integration/_files/indexer_amazon_account.php
     */
    public function testCreateMerchantVerifiesReadOnlyMode()
    {
        $this->expectException(ReadOnlyModeException::class);
        $this->apiClient->createMerchant([]);
    }

    /**
     * @magentoConfigFixture default/saleschannels/general/read_only 1
     * @magentoDataFixture Magento_Amazon::Test/Integration/_files/indexer_amazon_account.php
     */
    public function testUpdateMerchantVerifiesReadOnlyMode()
    {
        $this->expectException(ReadOnlyModeException::class);
        $this->apiClient->updateMerchant($this->getAccountByName('mage-test'), []);
    }

    /**
     * @param string $name
     * @return Account
     */
    private function getAccountByName(string $name): Account
    {
        $accountCollectionFactory = $this->objectManager->create(
            \Magento\Amazon\Model\ResourceModel\Amazon\Account\CollectionFactory::class
        );

        /** @var \Magento\Amazon\Model\Amazon\Account $account */
        $account = $accountCollectionFactory->create()
            ->addFieldToFilter('name', $name)
            ->getFirstItem();

        return $account;
    }
}
